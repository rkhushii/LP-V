# -*- coding: utf-8 -*-
"""ass2-imdb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FT9APt-iMn0i7xCpOvDsavg8Bp2-Gajx
"""

import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Embedding, Flatten
from tensorflow.keras.datasets import imdb
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load the IMDB dataset
max_features = 10000  # Number of words to consider as features
maxlen = 200          # Limit the review length to 200 words

(X_train, y_train), (X_test, y_test) = imdb.load_data(num_words=max_features)

# Pad sequences to ensure uniform input size
X_train = pad_sequences(X_train, maxlen=maxlen)
X_test = pad_sequences(X_test, maxlen=maxlen)

# Build a simple DNN model
model = Sequential([
    Embedding(input_dim=max_features, output_dim=128, input_length=maxlen),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(64, activation='relu'),
    Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=5, batch_size=32, validation_data=(X_test, y_test))

# Evaluate the model
score, accuracy = model.evaluate(X_test, y_test)
print(f"Test accuracy: {accuracy*100:.2f}%")

# Load word index
word_index = imdb.get_word_index()

# Reverse word index
word_to_id = {k: (v + 3) for k, v in word_index.items()}

id_to_word = {value: key for key, value in word_to_id.items()}

# Simple tokenizer
def encode_review(text):
    tokens = text.lower().split()
    encoded = [1]  # start token
    for word in tokens:
        encoded.append(word_to_id.get(word,2))  # unknown token
    return encoded

# --- ðŸ”® Predict on custom input ---
def predict_review_sentiment(review_text):
    encoded = encode_review(review_text)
    padded = pad_sequences([encoded], maxlen=maxlen)
    prediction = model.predict(padded)[0][0]

    sentiment = "Positive ðŸ˜Š" if prediction >= 0.5 else "Negative ðŸ˜ž"
    print(f"Review: {review_text}")
    print(encoded)
    print(f"Prediction score: {prediction:.4f}")
    print(f"Predicted Sentiment: {sentiment}")

# --- âœ¨ Example ---
predict_review_sentiment("The movie was amazing with great acting and plot.")
predict_review_sentiment("I loved it !")