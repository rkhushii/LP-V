# -*- coding: utf-8 -*-
"""wrong.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_cU5auuG9a7u0ad69eDuc1hhMKIMgJXQ
"""

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras import datasets, layers, models
from tensorflow.keras.utils import to_categorical

# 1. Load and preprocess the dataset
(train_images, train_labels), (test_images, test_labels) = datasets.fashion_mnist.load_data()
print(train_labels.unique())
# Normalize the images to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

# Reshape to 4D tensor (samples, height, width, channels)
train_images = train_images.reshape((train_images.shape[0], 28, 28, 1))
test_images = test_images.reshape((test_images.shape[0], 28, 28, 1))

# One-hot encode labels
train_labels = to_categorical(train_labels)
test_labels = to_categorical(test_labels)

# 2. Define the CNN model
model = models.Sequential([
    layers.Conv2D(32, (3, 3), activation='relu', input_shape=(28, 28, 1)),
    layers.MaxPooling2D((2, 2)),
    layers.Conv2D(64, (3, 3), activation='relu'),
    layers.MaxPooling2D((2, 2)),
    layers.Flatten(),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])

# 3. Compile the model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# 4. Train the model
model.fit(train_images, train_labels, epochs=5, batch_size=64, validation_data=(test_images, test_labels))

# 5. Evaluate the model
test_loss, test_acc = model.evaluate(test_images, test_labels)
print(f"Test accuracy: {test_acc:.4f}")

# 6. Define the list of class names (Fashion MNIST labels)
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat', 'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

def predict(model, image):
    """
    Predict the class of a given image.
    Arguments:
    model -- trained CNN model
    image -- image to classify (numpy array of shape (28, 28))
    """
    # Preprocess image: normalize and reshape to the model's input shape
    image = image.reshape((1, 28, 28, 1))  # Reshaping to (1, 28, 28, 1)

    # Make prediction
    prediction = model.predict(image)
    print(prediction)
    # Get the class with the highest probability
    predicted_class = np.argmax(prediction)

    # Return the predicted class index
    return predicted_class

# Show the image and the prediction
# 8. Predict using the function on the first test image
sample_image = test_images[16] # Get the first test image
# Use the predict function to get the class
predicted_class = predict(model, test_images[16])
plt.imshow(sample_image, cmap='gray')
plt.title(f"Predicted Class: {class_names[predicted_class]} Actual Class: {class_names[np.argmax(test_labels[16])]}")
plt.show()

"""train_labels"""

train_labels[5]

(train_images, train_labels), (test_images, test_labels) = datasets.fashion_mnist.load_data()
print(np.unique(train_labels))