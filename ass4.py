# -*- coding: utf-8 -*-
"""ass4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1khg9BVbXIt_fXnwT9J2AaklH92W5BoFX
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import SimpleRNN, Dense

# 1. Load the dataset
data = pd.read_csv('GOOG.csv')
prices = data['Close'].values.reshape(-1, 1)  # Using 'Open' prices

# 2. Normalize the data
scaler = MinMaxScaler()
scaled_prices = scaler.fit_transform(prices)

n=len(prices)

# 3. Create sequences
X = []
y = []

for i in range(60, len(scaled_prices)):
    X.append(scaled_prices[i-60:i, 0])  # 60 time steps
    y.append(scaled_prices[i, 0])

X_train = np.array(X)[:int(n*0.8)]
y_train = np.array(y)[:int(n*0.8)]
X_train = X_train.reshape((X_train.shape[0], X_train.shape[1], 1))  # RNN input shape

X_test = np.array(X)[int(n*0.8):]
y_test = np.array(y)[int(n*0.8):]
X_test = X_test.reshape((X_test.shape[0], X_test.shape[1], 1))  # RNN input shape

# 4. Build RNN model
model = Sequential()
model.add(SimpleRNN(units=50, return_sequences=False, input_shape=(60, 1)))
model.add(Dense(1))

# 5. Compile and train
model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(X_train, y_train, epochs=20, batch_size=32)

# 6. Plot training loss
plt.plot(model.history.history['loss'])
plt.title('Training Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.show()

# 7. Make predictions (on training set, for demo)
predicted = model.predict(X_test)
predicted_prices = scaler.inverse_transform(predicted)
real_prices = scaler.inverse_transform(y_test.reshape(-1, 1))

# 8. Plot real vs predicted
plt.plot(real_prices, label='Real Price')
plt.plot(predicted_prices, label='Predicted Price')
plt.title('Google Stock Price Prediction')
plt.xlabel('Time')
plt.ylabel('Stock Price')
plt.legend()
plt.show()

predicted_prices