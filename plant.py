# -*- coding: utf-8 -*-
"""practice.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1itbP0s09tPqbNRAhmslWh94Rx2qs4GjJ
"""

!pip install tensorflow matplotlib

import tensorflow as tf
from tensorflow.keras import layers,models
import matplotlib.pyplot as plt
import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image

dataset=tf.keras.utils.image_dataset_from_directory("dataset",batch_size=32,label_mode='int',image_size=(128,128))

train_size=int(len(dataset)*0.8)
train_ds=dataset.take(train_size)
val_ds=dataset.skip(train_size)

normalizer=layers.Rescaling(1./255)
train_ds=train_ds.map(lambda x,y:(normalizer(x),y))
val_ds=val_ds.map(lambda x,y:(normalizer(x),y))

print(train_ds)

num_classes=len(dataset.class_names)

model= models.Sequential([
    layers.Conv2D(32,(3,3),activation='relu',input_shape=(128,128,3)),
    layers.MaxPool2D(),
    layers.Conv2D(64,(3,3),activation='relu'),
    layers.MaxPooling2D(),
    layers.Flatten(),
    layers.Dense(128,activation='relu'),
    layers.Dense(num_classes,activation='softmax')
])

model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

history=model.fit(train_ds,validation_data=val_ds,epochs=5)

train_acc=history.history['accuracy']
val_acc=history.history['val_accuracy']

plt.plot(train_acc,label='Train accuracy')
plt.plot(val_acc,label='Validation accuracy')
plt.legend()

def predict_plant_disease(img_path, model, class_names):


    # Load and preprocess the image
    img = image.load_img(img_path, target_size=(128, 128))
    img_array = image.img_to_array(img) / 255.0
    img_batch = np.expand_dims(img_array, axis=0)

    # Predict
    predictions = model.predict(img_batch)
    predicted_class = class_names[np.argmax(predictions)]
    confidence = np.max(predictions)

    # Show the image with prediction
    plt.imshow(img_array)
    plt.title(f"Predicted: {predicted_class} ({confidence:.2f})")
    plt.axis('off')
    plt.show()

    return predicted_class

img_path='dataset/Tomato_Septoria_leaf_spot/0a76257e-6a78-459b-8f51-a266805121eb___Matt.S_CG 2527.JPG'
result=predict_plant_disease(img_path,model,dataset.class_names)

def predict_plant_disease(img_path,model,classnames):
    img=image.load_img(path=img_path,target_size=(128,128))
    img_array=image.img_to_array(img)/255.0
    img_batch=np.expand_dims(img_array,axis=0)

    predict=model.predict(img_batch)
    predicted_class=classnames[np.argmax(predict)]
    confidence=np.max(predict)

    plt.imshow(img_array)
    plt.title(f'Predicted class : {predicted_class}, confidence : {confidence:.2f}')
    plt.axis('off')

