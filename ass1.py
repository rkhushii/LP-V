# -*- coding: utf-8 -*-
"""ass1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14R_TzpW5HHg7359Np8uulsY_zX0tt5ku
"""

import numpy as np
from tensorflow.keras.datasets import boston_housing
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.preprocessing import StandardScaler,MinMaxScaler
import matplotlib.pyplot as plt

# 1. Load the dataset
(x_train, y_train), (x_test, y_test) = boston_housing.load_data()

# 2. Normalize the features
scaler = StandardScaler()
x_train = scaler.fit_transform(x_train)
x_test = scaler.transform(x_test)

# 3. Build the model
model = Sequential([
    Dense(64, activation='relu', input_shape=(x_train.shape[1],)),
    Dense(64, activation='relu'),
    Dense(64, activation='relu'),
    Dense(1, activation='linear')  # Output: price (regression)
])

# 4. Compile the model
model.compile(optimizer='adam', loss='mse', metrics=['mae'])

# 5. Train the model
history = model.fit(x_train, y_train, epochs=120, batch_size=32,
                    validation_split=0.2, verbose=0)

# 6. Evaluate the model
loss, mae = model.evaluate(x_test, y_test, verbose=0)
print(f"Test MAE (Mean Absolute Error): ${mae * 1000:.2f}")

# 7. Plot training history
plt.plot(history.history['mae'], label='Train MAE')
plt.plot(history.history['val_mae'], label='Val MAE')
plt.xlabel('Epoch')
plt.ylabel('Mean Absolute Error')
plt.title('Training History')
plt.legend()
plt.show()

# 8. Predict example
sample = x_test[5].reshape(1, -1)
predicted_price = model.predict(sample)[0][0]
print(f"Predicted price: ${predicted_price * 1000:.2f}")
print(f"Actual price:    ${y_test[5] * 1000:.2f}")



















